
1. **Fetch Updates from Remote:** Start by fetching the latest updates from the remote repository to ensure you have the most up-to-date information about all branches.

   ```bash
   git fetch origin
   ```

2. **Switch to the Branch:** If you are not already on the `store-player-stats` branch, switch to it using the following command:

   ```bash
   git checkout store-player-stats
   ```

3. **Merge Remote Changes:** Merge the changes from the remote `store-player-stats` branch into your local branch:

   ```bash
   git merge origin/store-player-stats
   ```

   This will incorporate the changes from the remote branch into your local branch.

4. **Resolve Conflicts (if any):** If there are conflicts during the merge, you will need to resolve them by editing the affected files, marking the conflicts as resolved, and then committing the changes.

   ```bash
   # After resolving conflicts
   git add .
   git commit -m "Resolve merge conflicts"
   ```

5. **Push Changes to Remote:** If everything merges cleanly, you can then push the changes back to the remote repository:

   ```bash
   git push origin store-player-stats
   ```

Now, your local `store-player-stats` branch should be updated with the changes from the remote branch. You can continue working on this branch, making further changes or testing without affecting the `main` branch. When you're ready, you can merge your changes from `store-player-stats` into the `main` branch.



/////////////////////MERGE ONTO MAIN///////////////////



1. **Switch to the Main Branch:** Before merging, ensure you are on the `main` branch by using the following command:

   ```bash
   git checkout main
   ```

2. **Pull Latest Changes:** To ensure you have the latest changes from the remote `main` branch, pull any updates:

   ```bash
   git pull origin main
   ```

3. **Merge the Branch:** Now, merge your `store-player-stats` branch into `main`:

   ```bash
   git merge store-player-stats
   ```

4. **Resolve Conflicts (if any):** If there are any merge conflicts, Git will notify you. Open the conflicting files, resolve the conflicts, and then commit the changes.

5. **Push Changes to Remote:** Finally, push the merged changes to the remote repository:

   ```bash
   git push origin main
   ```

That's it! Your changes from the `store-player-stats` branch are now merged into the `main` branch. Remember to replace `store-player-stats` with the actual name of your branch, and adjust the remote repository name (`origin`) if you're using a different remote.

After merging, you may also want to delete the `store-player-stats` branch if you no longer need it:

```bash
git branch -d store-player-stats
```

If you're concerned about deleting the branch locally before verifying that the merge worked correctly on the remote repository, you can use `-D` to force the deletion:

```bash
git branch -D store-player-stats
```

Remember to make these changes with caution, especially when working with important branches like `main`. It's always a good practice to back up your work or create a backup branch before performing such actions.



